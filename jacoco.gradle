apply plugin: 'jacoco'

jacoco {
    toolVersion = "$jacoco_version"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
    jacoco.dumpOnExit = true
    jacoco.classDumpDir = null
}

// Creates tasks based on the application build variant (productFlavor + buildType = variant)
android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()
    def autoGenerated = ['**/R.class',
                         '**/R$*.class',
                         '**/Manifest*.*',
                         'android/**/*.*',
                         '**/BuildConfig.*',
                         '**/*$ViewBinder*.*',
                         '**/*$ViewInjector*.*',
                         '**/Lambda$*.class',
                         '**/Lambda.class',
                         '**/*Lambda.class',
                         '**/*Lambda*.class',
                         '**/*Dagger*.*',
                         '**/*_MembersInjector.class',
                         '**/Dagger*Component*.class',
                         '**/Dagger*Subcomponent*.class',
                         '**/*Subcomponent$Builder.class',
                         '**/*Module_*Factory.class',
                         '**/KSApplication.*',
                         '**/libs/utils/ApplicationLifecycleUtil.*',
                         '**/libs/utils/ApplicationUtils.*',
                         '**/libs/recyclerviewpagination/*.*',
                         '**/ApplicationModule.*',
                         '**/*Activity*.*',
                         '**/*Fragment*.*',
                         '**/*ViewHolder*.*',
                         '**/*Toolbar*.*',
                         '**/*Dialog*.*',
                         '**/ui/*.*',
                         '**/ui/compose/*.*',
                         '**/ui/compose/designsystem/*.*',
                         '**/ui/views/*.*',
                         '**/ui/adapters/*.*',
                         '**/ui/adapters/data/*.*',
                         '**/ui/adapters/projectcampaign/*.*',
                         '**/databinding/*.*',
                         '**/mock/*.*',
                         '**/mock/factories/*.*',
                         '**/services/*.*',
                         '**/firebase/*.*',
                         '**/fragment/*.*']

    /**
     * Generates Jacoco coverage reports based off the unit tests.
     */
    task("jacoco${variantName}Report", type: JacocoReport, dependsOn: "test${variantName}UnitTest") {
        group 'Reporting'
        description "Generate ${variantName} Jacoco coverage reports."

        reports {
            xml.required.set(true)
            html.required.set(true)
        }

        // variant.javaCompile.source does not work
        // traverses from starting point
        def debugTree = fileTree(dir: variant.javaCompileProvider.get().destinationDirectory, excludes: autoGenerated)
        def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variant.name}", excludes: autoGenerated)

        def variantSourceSets = variant.sourceSets.java.srcDirs.collect { it.path }.flatten()
        sourceDirectories.from = [
                variantSourceSets,
                "src/main/java/com/kickstarter/"
        ]

        classDirectories.from = files([debugTree], [kotlinDebugTree])

        def unitTestTask = "test${variantName.capitalize()}UnitTest"
        def unitTestsData = "$project.buildDir/jacoco/${unitTestTask}.exec"
        executionData.from =  files([unitTestsData, "${buildDir}/jacoco/test${variantName}UnitTest.exec"])
    }
}